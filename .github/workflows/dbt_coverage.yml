name: dbt Coverage

on:
  pull_request:
    types: [ 'opened', 'edited', 'reopened', 'synchronize' ]
    paths:
    - "dbt_project/customer/**"
    - ".github/workflows/dbt_coverage.yml"
env:
  PYTHON_VERSION: '3.8.12'
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/237249625410/locations/global/workloadIdentityPools/github-actions/providers/github-actions-provider

jobs:
  dbt-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      pull-requests: "write"
      id-token: "write"
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.1

      - name: Get changed files by PR
        id: changed-files
        uses: tj-actions/changed-files@v40.1.1
        with:
          files: dbt_project/models/**/*.sql

      - name: Check Test and Documentation Coverage
        id: coverage
        working-directory: ./dbt_project/customer/
        run: |
          if [[ ${#model_path_filters[@]} -gt 0 ]]; then
            coverage_command="poetry run dbt-coverage compute doc --cov-format markdown ${model_path_filters[*]}"
            test_command="poetry run dbt-coverage compute test --cov-format markdown ${model_path_filters[*]}"
            
            # Run the commands and capture their outputs
            coverage_output=$(eval $coverage_command)
            test_output=$(eval $test_command)
            
            # Process the outputs: Replace "Coverage report" with "Documentation Coverage report" and "Test Coverage report"
            coverage_output="${coverage_output/Coverage report/Documentation Coverage report}"
            test_output="${test_output/Coverage report/Test Coverage report}"
            
            # Write the processed outputs to .md files
            echo -e "$coverage_output" > coverage_report.md
            echo -e "$test_output" > test_report.md
          else
            # Prepare a default message if no files were found
            echo "# Documentation Coverage report\nNo files found to check coverage." > coverage_report.md
            echo "# Test Coverage report\nNo files found to check coverage." > test_report.md
          fi
          
          # Append the file content to the environment variables
          echo "COVERAGE_REPORT<<EOF" >> $GITHUB_ENV
          cat coverage_report.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TEST_REPORT<<EOF" >> $GITHUB_ENV
          cat test_report.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment PR with Coverage Result
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ${{ env.COVERAGE_REPORT }}
            
            ${{ env.TEST_REPORT }}